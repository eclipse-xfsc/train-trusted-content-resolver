/*
Eclipse XFSC TRAIN Trusted Content Resolver

XFSC TRAIN Trusted Content Resolver REST API

API version: 1.0.0
Contact: denis.sukhoroslov@telekom.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tcr

import (
	"encoding/json"
	"fmt"
)

// checks if the ResolvedPointer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolvedPointer{}

// ResolvedPointer struct for ResolvedPointer
type ResolvedPointer struct {
	// Trust Framework Pointer (e.g., example.federation1.de)
	Pointer string `json:"pointer"`
	// DIDs resolved from the pointer
	Dids  []string `json:"dids,omitempty"`
	Error *Error   `json:"error,omitempty"`
}

type _ResolvedPointer ResolvedPointer

// NewResolvedPointer instantiates a new ResolvedPointer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolvedPointer(pointer string) *ResolvedPointer {
	this := ResolvedPointer{}
	this.Pointer = pointer
	return &this
}

// NewResolvedPointerWithDefaults instantiates a new ResolvedPointer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolvedPointerWithDefaults() *ResolvedPointer {
	this := ResolvedPointer{}
	return &this
}

// GetPointer returns the Pointer field value
func (o *ResolvedPointer) GetPointer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pointer
}

// GetPointerOk returns a tuple with the Pointer field value
// and a boolean to check if the value has been set.
func (o *ResolvedPointer) GetPointerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pointer, true
}

// SetPointer sets field value
func (o *ResolvedPointer) SetPointer(v string) {
	o.Pointer = v
}

// GetDids returns the Dids field value if set, zero value otherwise.
func (o *ResolvedPointer) GetDids() []string {
	if o == nil || IsNil(o.Dids) {
		var ret []string
		return ret
	}
	return o.Dids
}

// GetDidsOk returns a tuple with the Dids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedPointer) GetDidsOk() ([]string, bool) {
	if o == nil || IsNil(o.Dids) {
		return nil, false
	}
	return o.Dids, true
}

// HasDids returns a boolean if a field has been set.
func (o *ResolvedPointer) HasDids() bool {
	if o != nil && !IsNil(o.Dids) {
		return true
	}

	return false
}

// SetDids gets a reference to the given []string and assigns it to the Dids field.
func (o *ResolvedPointer) SetDids(v []string) {
	o.Dids = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResolvedPointer) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedPointer) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResolvedPointer) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *ResolvedPointer) SetError(v Error) {
	o.Error = &v
}

func (o ResolvedPointer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolvedPointer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pointer"] = o.Pointer
	if !IsNil(o.Dids) {
		toSerialize["dids"] = o.Dids
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *ResolvedPointer) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pointer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolvedPointer := _ResolvedPointer{}

	err = json.Unmarshal(bytes, &varResolvedPointer)

	if err != nil {
		return err
	}

	*o = ResolvedPointer(varResolvedPointer)

	return err
}

type NullableResolvedPointer struct {
	value *ResolvedPointer
	isSet bool
}

func (v NullableResolvedPointer) Get() *ResolvedPointer {
	return v.value
}

func (v *NullableResolvedPointer) Set(val *ResolvedPointer) {
	v.value = val
	v.isSet = true
}

func (v NullableResolvedPointer) IsSet() bool {
	return v.isSet
}

func (v *NullableResolvedPointer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolvedPointer(val *ResolvedPointer) *NullableResolvedPointer {
	return &NullableResolvedPointer{value: val, isSet: true}
}

func (v NullableResolvedPointer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolvedPointer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
