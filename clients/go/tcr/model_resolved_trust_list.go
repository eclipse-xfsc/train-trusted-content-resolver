/*
Eclipse XFSC TRAIN Trusted Content Resolver

XFSC TRAIN Trusted Content Resolver REST API

API version: 1.0.0
Contact: denis.sukhoroslov@telekom.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tcr

import (
	"encoding/json"
	"fmt"
)

// checks if the ResolvedTrustList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolvedTrustList{}

// ResolvedTrustList struct for ResolvedTrustList
type ResolvedTrustList struct {
	// Resolved VC endpoint URI
	VcUri *string `json:"vcUri,omitempty"`
	// Resolved Trust List URI
	TlUri *string `json:"tlUri,omitempty"`
	// Trust List structure
	TrustList map[string]interface{} `json:"trustList,omitempty"`
	// VC signature verified and VC hash matches Trust List content
	VcVerified bool `json:"vcVerified"`
}

type _ResolvedTrustList ResolvedTrustList

// NewResolvedTrustList instantiates a new ResolvedTrustList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolvedTrustList(vcVerified bool) *ResolvedTrustList {
	this := ResolvedTrustList{}
	this.VcVerified = vcVerified
	return &this
}

// NewResolvedTrustListWithDefaults instantiates a new ResolvedTrustList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolvedTrustListWithDefaults() *ResolvedTrustList {
	this := ResolvedTrustList{}
	return &this
}

// GetVcUri returns the VcUri field value if set, zero value otherwise.
func (o *ResolvedTrustList) GetVcUri() string {
	if o == nil || IsNil(o.VcUri) {
		var ret string
		return ret
	}
	return *o.VcUri
}

// GetVcUriOk returns a tuple with the VcUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedTrustList) GetVcUriOk() (*string, bool) {
	if o == nil || IsNil(o.VcUri) {
		return nil, false
	}
	return o.VcUri, true
}

// HasVcUri returns a boolean if a field has been set.
func (o *ResolvedTrustList) HasVcUri() bool {
	if o != nil && !IsNil(o.VcUri) {
		return true
	}

	return false
}

// SetVcUri gets a reference to the given string and assigns it to the VcUri field.
func (o *ResolvedTrustList) SetVcUri(v string) {
	o.VcUri = &v
}

// GetTlUri returns the TlUri field value if set, zero value otherwise.
func (o *ResolvedTrustList) GetTlUri() string {
	if o == nil || IsNil(o.TlUri) {
		var ret string
		return ret
	}
	return *o.TlUri
}

// GetTlUriOk returns a tuple with the TlUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedTrustList) GetTlUriOk() (*string, bool) {
	if o == nil || IsNil(o.TlUri) {
		return nil, false
	}
	return o.TlUri, true
}

// HasTlUri returns a boolean if a field has been set.
func (o *ResolvedTrustList) HasTlUri() bool {
	if o != nil && !IsNil(o.TlUri) {
		return true
	}

	return false
}

// SetTlUri gets a reference to the given string and assigns it to the TlUri field.
func (o *ResolvedTrustList) SetTlUri(v string) {
	o.TlUri = &v
}

// GetTrustList returns the TrustList field value if set, zero value otherwise.
func (o *ResolvedTrustList) GetTrustList() map[string]interface{} {
	if o == nil || IsNil(o.TrustList) {
		var ret map[string]interface{}
		return ret
	}
	return o.TrustList
}

// GetTrustListOk returns a tuple with the TrustList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedTrustList) GetTrustListOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TrustList) {
		return map[string]interface{}{}, false
	}
	return o.TrustList, true
}

// HasTrustList returns a boolean if a field has been set.
func (o *ResolvedTrustList) HasTrustList() bool {
	if o != nil && !IsNil(o.TrustList) {
		return true
	}

	return false
}

// SetTrustList gets a reference to the given map[string]interface{} and assigns it to the TrustList field.
func (o *ResolvedTrustList) SetTrustList(v map[string]interface{}) {
	o.TrustList = v
}

// GetVcVerified returns the VcVerified field value
func (o *ResolvedTrustList) GetVcVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VcVerified
}

// GetVcVerifiedOk returns a tuple with the VcVerified field value
// and a boolean to check if the value has been set.
func (o *ResolvedTrustList) GetVcVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VcVerified, true
}

// SetVcVerified sets field value
func (o *ResolvedTrustList) SetVcVerified(v bool) {
	o.VcVerified = v
}

func (o ResolvedTrustList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolvedTrustList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VcUri) {
		toSerialize["vcUri"] = o.VcUri
	}
	if !IsNil(o.TlUri) {
		toSerialize["tlUri"] = o.TlUri
	}
	if !IsNil(o.TrustList) {
		toSerialize["trustList"] = o.TrustList
	}
	toSerialize["vcVerified"] = o.VcVerified
	return toSerialize, nil
}

func (o *ResolvedTrustList) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vcVerified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolvedTrustList := _ResolvedTrustList{}

	err = json.Unmarshal(bytes, &varResolvedTrustList)

	if err != nil {
		return err
	}

	*o = ResolvedTrustList(varResolvedTrustList)

	return err
}

type NullableResolvedTrustList struct {
	value *ResolvedTrustList
	isSet bool
}

func (v NullableResolvedTrustList) Get() *ResolvedTrustList {
	return v.value
}

func (v *NullableResolvedTrustList) Set(val *ResolvedTrustList) {
	v.value = val
	v.isSet = true
}

func (v NullableResolvedTrustList) IsSet() bool {
	return v.isSet
}

func (v *NullableResolvedTrustList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolvedTrustList(val *ResolvedTrustList) *NullableResolvedTrustList {
	return &NullableResolvedTrustList{value: val, isSet: true}
}

func (v NullableResolvedTrustList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolvedTrustList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
