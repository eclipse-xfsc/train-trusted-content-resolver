/*
Eclipse XFSC TRAIN Trusted Content Resolver

XFSC TRAIN Trusted Content Resolver REST API

API version: 1.0.0
Contact: denis.sukhoroslov@telekom.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tcr

import (
	"encoding/json"
	"fmt"
)

// KnownServiceEndpointType the model 'KnownServiceEndpointType'
type KnownServiceEndpointType string

// List of KnownServiceEndpointType
const (
	ISSUER      KnownServiceEndpointType = "gx-trust-list-issuer"
	SCHEMAS     KnownServiceEndpointType = "gx-trust-list-schemas"
	POLICIES    KnownServiceEndpointType = "gx-trust-list-policies"
	APPS        KnownServiceEndpointType = "gx-trust-list-apps"
	VERIFIER    KnownServiceEndpointType = "gx-trust-list-verifier"
	AUTHORITIES KnownServiceEndpointType = "gx-trust-list-authorities"
)

// All allowed values of KnownServiceEndpointType enum
var AllowedKnownServiceEndpointTypeEnumValues = []KnownServiceEndpointType{
	"gx-trust-list-issuer",
	"gx-trust-list-schemas",
	"gx-trust-list-policies",
	"gx-trust-list-apps",
	"gx-trust-list-verifier",
	"gx-trust-list-authorities",
}

func (v *KnownServiceEndpointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KnownServiceEndpointType(value)
	for _, existing := range AllowedKnownServiceEndpointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KnownServiceEndpointType", value)
}

// NewKnownServiceEndpointTypeFromValue returns a pointer to a valid KnownServiceEndpointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKnownServiceEndpointTypeFromValue(v string) (*KnownServiceEndpointType, error) {
	ev := KnownServiceEndpointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KnownServiceEndpointType: valid values are %v", v, AllowedKnownServiceEndpointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KnownServiceEndpointType) IsValid() bool {
	for _, existing := range AllowedKnownServiceEndpointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KnownServiceEndpointType value
func (v KnownServiceEndpointType) Ptr() *KnownServiceEndpointType {
	return &v
}

type NullableKnownServiceEndpointType struct {
	value *KnownServiceEndpointType
	isSet bool
}

func (v NullableKnownServiceEndpointType) Get() *KnownServiceEndpointType {
	return v.value
}

func (v *NullableKnownServiceEndpointType) Set(val *KnownServiceEndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableKnownServiceEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableKnownServiceEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKnownServiceEndpointType(val *KnownServiceEndpointType) *NullableKnownServiceEndpointType {
	return &NullableKnownServiceEndpointType{value: val, isSet: true}
}

func (v NullableKnownServiceEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKnownServiceEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
