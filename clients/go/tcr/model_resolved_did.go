/*
Eclipse XFSC TRAIN Trusted Content Resolver

XFSC TRAIN Trusted Content Resolver REST API

API version: 1.0.0
Contact: denis.sukhoroslov@telekom.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tcr

import (
	"encoding/json"
	"fmt"
)

// checks if the ResolvedDid type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolvedDid{}

// ResolvedDid struct for ResolvedDid
type ResolvedDid struct {
	// Corresponding DID mapped to Trust Framework Pointer
	Did         string       `json:"did"`
	ResolvedDoc *ResolvedDoc `json:"resolvedDoc,omitempty"`
	Error       *Error       `json:"error,omitempty"`
}

type _ResolvedDid ResolvedDid

// NewResolvedDid instantiates a new ResolvedDid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolvedDid(did string) *ResolvedDid {
	this := ResolvedDid{}
	this.Did = did
	return &this
}

// NewResolvedDidWithDefaults instantiates a new ResolvedDid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolvedDidWithDefaults() *ResolvedDid {
	this := ResolvedDid{}
	return &this
}

// GetDid returns the Did field value
func (o *ResolvedDid) GetDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Did
}

// GetDidOk returns a tuple with the Did field value
// and a boolean to check if the value has been set.
func (o *ResolvedDid) GetDidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Did, true
}

// SetDid sets field value
func (o *ResolvedDid) SetDid(v string) {
	o.Did = v
}

// GetResolvedDoc returns the ResolvedDoc field value if set, zero value otherwise.
func (o *ResolvedDid) GetResolvedDoc() ResolvedDoc {
	if o == nil || IsNil(o.ResolvedDoc) {
		var ret ResolvedDoc
		return ret
	}
	return *o.ResolvedDoc
}

// GetResolvedDocOk returns a tuple with the ResolvedDoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedDid) GetResolvedDocOk() (*ResolvedDoc, bool) {
	if o == nil || IsNil(o.ResolvedDoc) {
		return nil, false
	}
	return o.ResolvedDoc, true
}

// HasResolvedDoc returns a boolean if a field has been set.
func (o *ResolvedDid) HasResolvedDoc() bool {
	if o != nil && !IsNil(o.ResolvedDoc) {
		return true
	}

	return false
}

// SetResolvedDoc gets a reference to the given ResolvedDoc and assigns it to the ResolvedDoc field.
func (o *ResolvedDid) SetResolvedDoc(v ResolvedDoc) {
	o.ResolvedDoc = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResolvedDid) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResolvedDid) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResolvedDid) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *ResolvedDid) SetError(v Error) {
	o.Error = &v
}

func (o ResolvedDid) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolvedDid) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["did"] = o.Did
	if !IsNil(o.ResolvedDoc) {
		toSerialize["resolvedDoc"] = o.ResolvedDoc
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *ResolvedDid) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"did",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolvedDid := _ResolvedDid{}

	err = json.Unmarshal(bytes, &varResolvedDid)

	if err != nil {
		return err
	}

	*o = ResolvedDid(varResolvedDid)

	return err
}

type NullableResolvedDid struct {
	value *ResolvedDid
	isSet bool
}

func (v NullableResolvedDid) Get() *ResolvedDid {
	return v.value
}

func (v *NullableResolvedDid) Set(val *ResolvedDid) {
	v.value = val
	v.isSet = true
}

func (v NullableResolvedDid) IsSet() bool {
	return v.isSet
}

func (v *NullableResolvedDid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolvedDid(val *ResolvedDid) *NullableResolvedDid {
	return &NullableResolvedDid{value: val, isSet: true}
}

func (v NullableResolvedDid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolvedDid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
